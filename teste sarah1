const axios = require('axios');
const async = require('async');

// Defina a URL da sua API de ping-pong
const URL = 'http://localhost:3000/ping';

// Função que envia uma solicitação de ping e retorna a resposta
async function sendPing() {
    try {
        const response = await axios.get(URL);
        return response.status;
    } catch (error) {
        console.error(`Request failed: ${error.message}`);
        return null;
    }
}

// Função para executar múltiplas solicitações simultaneamente
function stressTest(numRequests, concurrency, callback) {
    const tasks = [];

    for (let i = 0; i < numRequests; i++) {
        tasks.push(sendPing);
    }

    async.parallelLimit(tasks, concurrency, (err, results) => {
        if (err) {
            return callback(err);
        }
        callback(null, results);
    });
}

const numRequests = 1000; // Número total de requisições
const concurrency = 50;   // Número máximo de requisições simultâneas

const startTime = Date.now();

stressTest(numRequests, concurrency, (err, results) => {
    if (err) {
        console.error(`Test failed: ${err.message}`);
        return;
    }

    const endTime = Date.now();
    const successCount = results.filter(status => status === 200).length;
    const failureCount = results.length - successCount;

    console.log(`Enviadas ${numRequests} requisições em ${(endTime - startTime) / 1000} segundos.`);
    console.log(`Sucessos: ${successCount}`);
    console.log(`Falhas: ${failureCount}`);
});
